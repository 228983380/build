#============================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build OpenWrt
#============================================================================================

name: JDCloud-AX6000-Baili固件编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      MAC_ORDER:
        description: '使用官方原始MAC地址顺序'
        required: true
        default: false
        type: boolean
      WA_FW:
        description: '选择wifi固件'
        required: true
        default: 'no-new-fw'
        type: choice
        options:
        - no-new-fw
        - mt7986-fw-20221208
        - mt7986-fw-jdc
        - mt7986-fw-20230421
        - mt7986-fw-20230808
        - mt7986-fw-20231024
      WO_FW:
        description: '选择warp固件'
        required: true
        default: 'no-new-fw'
        type: choice
        options:
        - no-new-fw
        - mt7986-fw-jdc
        - mt7986-fw-20230421
        - mt7986-fw-20230808
        - mt7986-fw-20231024
      GSW:
        description: '交换机模式使用GSW驱动（默认是DSA）'
        required: true
        default: false
        type: boolean
      APP_MTK:
        description: '使用旧的luci-app-mtk无线配置工具'
        required: true
        default: false
        type: boolean
      NO_DOCKERMAN:
        description: '不构建dockerman'
        required: true
        default: false
        type: boolean
      ssh:
        description: '通过SSH连接到Actions'
        required: false
        default: 'false'
      source_branch:
        description: "选择编译源码"
        required: true
        default: "lede-master"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
          - Lienol-master
          - hanwckf-mt798x
      
env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  SSH_ACTIONS: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: 检查项目分支
        uses: actions/checkout@main

      - name: 初始化编译环境
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 下载固件源码 [ ${{ inputs.source_branch }} ]
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # Set up compilation source code
          if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == *"hanwckf"* ]]; then
              REPO_URL="https://github.com/hanwckf/immortalwrt-mt798x"
              REPO_BRANCH="openwrt-21.02"
              TAGS_NAME="hanwckf"
          elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
              REPO_URL="https://github.com/Lienol/openwrt"
              REPO_BRANCH="22.03"
              TAGS_NAME="Lienol"
          else
              echo "Unknown source code repository."
              exit 1
          fi

          # Clone source code
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          # Set output information
          echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.openwrt_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 加载feeds.conf.default & DIY_P1_SH
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: 更新feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: 安装feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: 加载config & DIY_P2_SH
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: 使用原厂MAC地址顺序
        if: github.event.inputs.MAC_ORDER == 'true'
        run: |
          if [[ "${{ inputs.source_branch }}" == *"hanwckf"* ]]; then
              cd openwrt
              ## 调换lan、wan的MAC地址
              sed -i '/jdcloud,re-cp-03)/{n; s/wan_mac=$(mmc_get_mac_binary factory 0x2a)/wan_mac=$(mmc_get_mac_binary factory 0x24)/; n; s/lan_mac=$(mmc_get_mac_binary factory 0x24)/lan_mac=$(mmc_get_mac_binary factory 0x2A)/}' target/linux/mediatek/mt7986/base-files/etc/board.d/02_network
              ## 创建一个辅助文件。文件内容是写入MAC地址到dat文件，固定wifi MAC地址
              echo -e "\t\tlocal wifi0_mac=\"\$(mmc_get_mac_binary factory 0x04)\"
              \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi0_mac/;b;}; \\\$aMacAddress=\$wifi0_mac\" /etc/wireless/mediatek/mt7986-ax6000.dbdc.b0.dat
              \t\tlocal wifi1_mac=\"\$(macaddr_setbit_la \$wifi0_mac)\"
              \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi1_mac/;b;}; \\\$aMacAddress=\$wifi1_mac\" /etc/wireless/mediatek/mt7986-ax6000.dbdc.b1.dat" > temp_insert.txt
              ## 将文本内容写入02_network
              sed -i '/mediatek_setup_macs()/,/\};/ {/jdcloud,re-cp-03)/ {n;n;n;r temp_insert.txt
              }}' target/linux/mediatek/mt7986/base-files/etc/board.d/02_network
          else
              echo "这个源码不存在这个操作，跳过"
          fi

      - name: 选择无线firmware
        run: |
          if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
              cp -r JDCloud-AX6000-Baili/firmware/mt_wifi/mt7986-fw-jdc openwrt/package/lean/mt/drivers/mt_wifi/files
              cd openwrt
              if [ ${{ github.event.inputs.WA_FW }} == 'no-new-fw' ]; then
                      sed -i '/CONFIG_MTK_MT7986_NEW_FW=y/d' .config
              else
                      sed -i 's/^MT7986_FW_DIR := mt7986-fw.*/MT7986_FW_DIR := ${{github.event.inputs.WA_FW}}/g' package/lean/mt/drivers/mt_wifi/Makefile
              fi
          elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
              cd openwrt
              sed -i '/CONFIG_MTK_MT7986_NEW_FW=y/d' .config
              echo "这个源码不存在这个操作，跳过"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
              cp -r JDCloud-AX6000-Baili/firmware/mt_wifi/mt7986-fw-jdc openwrt/package/lean/mt/drivers/mt_wifi/files
              cd openwrt
              if [ ${{ github.event.inputs.WA_FW }} == 'no-new-fw' ]; then
                      sed -i '/CONFIG_MTK_MT7986_NEW_FW=y/d' .config
              else
                      sed -i 's/^MT7986_FW_DIR := mt7986-fw.*/MT7986_FW_DIR := ${{github.event.inputs.WA_FW}}/g' package/lean/mt/drivers/mt_wifi/Makefile
              fi
          elif [[ "${{ inputs.source_branch }}" == *"hanwckf"* ]]; then
              cp -r JDCloud-AX6000-Baili/firmware/mt_wifi/mt7986-fw-jdc openwrt/package/mtk/drivers/mt_wifi/files
              cd openwrt
              if [ ${{ github.event.inputs.WA_FW }} == 'no-new-fw' ]; then
                      sed -i '/CONFIG_MTK_MT7986_NEW_FW=y/d' .config
              else
                      sed -i 's/^MT7986_FW_DIR := mt7986-fw.*/MT7986_FW_DIR := ${{github.event.inputs.WA_FW}}/g' package/mtk/drivers/mt_wifi/Makefile
              fi
          elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
              cp -r JDCloud-AX6000-Baili/firmware/mt_wifi/mt7986-fw-jdc openwrt/package/lean/mt/drivers/mt_wifi/files
              cd openwrt
              if [ ${{ github.event.inputs.WA_FW }} == 'no-new-fw' ]; then
                      sed -i '/CONFIG_MTK_MT7986_NEW_FW=y/d' .config
              else
                      sed -i 's/^MT7986_FW_DIR := mt7986-fw.*/MT7986_FW_DIR := ${{github.event.inputs.WA_FW}}/g' package/lean/mt/drivers/mt_wifi/Makefile
              fi
          else
              echo "Unknown source code repository."
              exit 1
          fi

      - name: 选择无线warp
        run: |
          if [[ "${{ inputs.source_branch }}" == *"hanwckf"* ]]; then
              cp -r JDCloud-AX6000-Baili/firmware/warp/mt7986-fw-jdc openwrt/package/mtk/drivers/warp/files
              cd openwrt
              if [ ${{ github.event.inputs.WO_FW }} == 'no-new-fw' ]; then
                      sed -i '/CONFIG_WARP_NEW_FW=y/d' .config
              else
                      sed -i 's/^MT7986_NEW_WOFW_DIR := mt7986-fw.*/MT7986_NEW_WOFW_DIR := ${{github.event.inputs.WO_FW}}/g' package/mtk/drivers/warp/Makefile
              fi
          else
              cd openwrt
              sed -i '/CONFIG_WARP_NEW_FW=y/d' .config
              echo "这个源码不存在这个操作，跳过"
          fi

      - name: 使用GSW交换机驱动（非DSA）
        if: github.event.inputs.GSW == 'true'
        run: |
          if [[ "${{ inputs.source_branch }}" == *"hanwckf"* ]]; then
              cp JDCloud-AX6000-Baili/mt7986a-gsw-jdcloud-re-cp-03.dts openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7986a-jdcloud-re-cp-03.dts
              cd openwrt
              sed -i '/jdcloud,re-cp-03)/ {n; /lan1 lan2 lan3 lan4/ {s/lan1 lan2 lan3 lan4/eth0/; a\
              \t\tucidef_add_switch "switch0" "1:lan" "2:lan" "3:lan" "4:lan" "6u@eth0"
              }}' target/linux/mediatek/mt7986/base-files/etc/board.d/02_network
          else
              echo "这个源码不存在这个操作，跳过"
          fi

      - name: 使用luci-app-mtk无线配置
        if: github.event.inputs.APP_MTK == 'true'
        run: |
          cd openwrt
          sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
          sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
          sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
          sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config

      - name: 取消编译dockerman
        if: github.event.inputs.NO_DOCKERMAN == 'true'
        run: |
          cd openwrt
          sed -i '/CONFIG_PACKAGE_luci-app-dockerman=y/d' .config

      - name: SSH链接管理
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: 下载安装包
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*TARGET_.*_(.*)_DEVICE_.*=y/\1/' > TARGET_NAME
          [ -s TARGET_NAME ] && echo "TARGET_NAME=$(cat TARGET_NAME)" >> $GITHUB_ENV
          sed -nE 's/.*(192.168\.[0-9]+\.[0-9]+).*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
          [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV
          if grep -q 'CONFIG_MTK_MT7986_NEW_FW=y' .config; then
                  echo "WA_FW=$(grep 'MT7986_FW_DIR :=' package/lean/mt/drivers/mt_wifi/Makefile | awk -F' ' '{print $3}')" >> $GITHUB_ENV
          else
                  echo "WA_FW=no-new-fw" >> $GITHUB_ENV
          fi
          if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' .config; then
                  echo "WIFI_INTERFACE=-mtwifi" >> $GITHUB_ENV
          else
                  echo "WIFI_INTERFACE=" >> $GITHUB_ENV
          fi
          if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' .config; then
                  echo "BUILD_DOCKERMAN=-docker" >> $GITHUB_ENV
          else
                  echo "BUILD_DOCKERMAN=" >> $GITHUB_ENV
          fi
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 查看磁盘使用情况
        if: (!cancelled())
        run: df -hT

      - name: 上传BIN目录
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 整理文件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: 打包上传固件到Actions Artifacts
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ inputs.source_branch }}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 生成固件Release标签
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "# 本次固件详情" >> release.txt
          echo "## 基本信息" >> release.txt
          echo "- 构建使用源码：${{ inputs.source_branch }}" >> release.txt
          echo "- 后台登录地址：${{ env.IP_ADDR }}" >> release.txt
          echo "## 固件特点" >> release.txt
          if [[ "${{ env.MAC_FIX }}" == '-MAC_fix' ]]; then
                 echo "- 1. 使用原厂的MAC地址顺序" >> release.txt
          else
                 echo "- 1. 未修改源码中的MAC地址顺序，网卡序号倒序" >> release.txt
          fi
          echo "- mt_wifi firmware: ${{ env.WA_FW }}" >> release.txt
          echo "- &ensp;&ensp;warp firmware: ${{ env.WO_FW }}" >> release.txt
          if [[ "${{ env.SWITCH }}" == '-gsw' ]]; then
                 echo "- 2. 使用GSW交换机驱动（非DSA）" >> release.txt
          else
                 echo "- 2. 使用DSA交换机驱动" >> release.txt
          fi
          if [[ "${{ env.WIFI_INTERFACE }}" == '-mtwifi' ]]; then
                  echo "- 3. 使用hanwckf mtwifi-cfg原生luci无线配置工具" >> release.txt
          else
                  echo "- 3. 使用mtk-sdk luci-app-mtk无线配置工具" >> release.txt
          fi
          if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                  echo "- 4. 已编译luci-app-dockerman" >> release.txt
          else
                  echo "- 4. 未编译luci-app-dockerman" >> release.txt
          echo "还有很多，不一一列举" >> release.txt
          fi
          echo "release_tag=${{ inputs.source_branch }}-${{ env.FILE_DATE }}-${{ env.DEVICE_NAME }}${{ env.SWITCH }}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布固件至Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: 删除工作流
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
          token: ${{ secrets.GH_TOKEN }}
          body: |

            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: password
            - Default WIFI name: OpenWrt
            - Default WIFI password: none
            ### Install to EMMC
            - Login to OpenWrt → System → Amlogic Service → Install OpenWrt
            ### OpenWrt Image Verification
            - sha256sum
    
